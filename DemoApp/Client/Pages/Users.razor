@using BlazorStrap
@using DemoApp.Shared
@using DemoApp.Client.Data
@page "/userspage"
@inject LocalUserStore LocalUserStore
@inject HttpClient Http
@inject IBlazorStrap blazorStrap
<div class="container">
    <BSNavbar Color="BSColor.Light">
        <BSContainer Container="Container.Fluid">
            <SyncStatus />
            <form class="d-flex">
                <BSButton Color="BSColor.Primary" Target="modal1">Add User</BSButton>
                <BSButton Color="BSColor.Success" IsOutlined="true">Sync</BSButton>
            </form>
        </BSContainer>
    </BSNavbar>
    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Id</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Email</th>
                    <th>Delete User</th>
                </tr>
            </thead>
            <tbody>
                @if (users.Any())
                {
                    @foreach (var User in users)
                    {
                        <tr @onclick="(() => SetUserForUpdate(User))">
                            <td>@User.Id</td>
                            <td>@User.Firstname</td>
                            <td>@User.Lastname</td>
                            <td>@User.Email</td>
                            <td><button class="btn btn-danger" @onclick="(() => DeleteUser(User))">Delete</button></td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="6"><strong>No Users available</strong></td></tr>
                }
            </tbody>
        </table>
    </div>
    <BSModal DataId="modal1" OnShow="@(() => AddNewUser(new Localuser()))">
        <BSForm Model="model" OnValidSubmit="@Update">
            <BSModalHeader>New User Form</BSModalHeader>
            <BSModalContent>
                <div class="mb-3">
                    <BSLabel>Name</BSLabel>
                    <BSInput InputType="InputType.Text" @bind-Value="model.Firstname" />
                </div>
                <div class="mb-3">
                    <BSLabel>Last Name</BSLabel>
                    <BSInput InputType="InputType.Text" @bind-Value="model.Lastname" />
                </div>
                <div class="mb-3">
                    <BSLabel>Email address</BSLabel>
                    <BSInput InputType="InputType.Email" placeholder="name@example.com" @bind-Value="model.Email" />
                </div>
            </BSModalContent>
            <BSModalFooter>
                <BSButton Target="model9">Cancel</BSButton>
                <BSButton IsSubmit="true" Color="BSColor.Primary">Save</BSButton>
            </BSModalFooter>
        </BSForm>
    </BSModal>
</div>

@code {

    IEnumerable<Localuser>? users = new List<Localuser>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //users = await Http.GetFromJsonAsync<List<User>>("UsersData");
            users = await LocalUserStore.GetUsers();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
       
    }
    BSModal refModal;
    private Localuser model = new Localuser();

    public User NewUser { get; set; } = new User();
    private async Task AddNewUser(Localuser u)
    {
        model = u;
    }
    private async Task Update()
    {
        blazorStrap.ForwardClick("modal1");
        await LocalUserStore.SaveUserAsync(model);
        users = await LocalUserStore.GetUsers();
    }


    private async Task AddNewUser()
    {
        await LocalUserStore.SaveUserAsync(model);
        users = await LocalUserStore.GetUsers();
    }
    User UpdateUser = new User();
    private void SetUserForUpdate(User User)
    {
        UpdateUser = User;
    }
    private async Task DeleteUser(User User)
    {
        await Http.DeleteAsync("Users/"+User.Id);
    }
}
